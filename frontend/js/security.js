// Script de Seguran√ßa - Sistema Barbeiros
// Garante que n√£o h√° tokens pr√©-autenticados na inicializa√ß√£o

(function() {
    'use strict';
    
    // Fun√ß√£o para limpar dados de autentica√ß√£o
    function clearAuthData() {
        localStorage.removeItem('barbeiros-token');
        localStorage.removeItem('barbeiros-user');
        sessionStorage.removeItem('barbeiros-token');
        sessionStorage.removeItem('barbeiros-user');
    }
    
    // Fun√ß√£o para verificar se h√° tokens inv√°lidos
    function checkForInvalidTokens() {
        const token = localStorage.getItem('barbeiros-token');
        const user = localStorage.getItem('barbeiros-user');
        
        if (token) {
            try {
                const parts = token.split('.');
                if (parts.length !== 3) {
                    clearAuthData();
                    return;
                }
                
                const payload = JSON.parse(atob(parts[1]));
                const now = Math.floor(Date.now() / 1000);
                
                // Verificar expira√ß√£o
                if (payload.exp && payload.exp < now) {
                    clearAuthData();
                    return;
                }
                
                // Verificar se tem pelo menos um dos campos necess√°rios (mais flex√≠vel)
                if (!payload.userId && !payload.id) {
                    clearAuthData();
                    return;
                }
                
            } catch (error) {
                clearAuthData();
            }
        }
        
        if (user) {
            try {
                const userData = JSON.parse(user);
                if (!userData.id && !userData.id_usuario) {
                    clearAuthData();
                }
            } catch (error) {
                clearAuthData();
            }
        }
    }
    
    // Fun√ß√£o para for√ßar logout em caso de erro de autentica√ß√£o
    function forceLogout() {
        clearAuthData();
        // Redirecionar para login se n√£o estivermos na p√°gina de login
        if (!window.location.pathname.includes('login')) {
            window.location.href = 'pages/login.html';
        }
    }
    
    // ===========================================
    // ANOTA√á√ÉO DE SEGURAN√áA - INTERCEPTA√á√ÉO 401
    // ===========================================
    // 
    // ALTERA√á√ïES IMPLEMENTADAS PARA CORRIGIR LOGOUT INDEVIDO:
    // 
    // 1. ANTES: Qualquer resposta 401 causava logout for√ßado
    // 2. AGORA: S√≥ for√ßa logout em casos espec√≠ficos de seguran√ßa
    // 
    // L√ìGICA DE SEGURAN√áA ATUAL:
    // - Requisi√ß√µes SEM token: N√ÉO for√ßa logout (pode ser rota p√∫blica ou erro de cliente)
    // - Requisi√ß√µes COM token v√°lido mas 401: N√ÉO for√ßa logout (pode ser erro tempor√°rio/permiss√£o)
    // - Requisi√ß√µes COM token expirado: FOR√áA logout (seguran√ßa)
    // - Requisi√ß√µes COM token malformado: FOR√áA logout (seguran√ßa)
    // 
    // RISCOS MITIGADOS:
    // ‚úÖ Evita logout por requisi√ß√µes malformadas do cliente
    // ‚úÖ Evita logout por erros tempor√°rios de rede/servidor
    // ‚úÖ Mant√©m seguran√ßa para tokens realmente inv√°lidos
    // ‚úÖ Preserva experi√™ncia do usu√°rio
    // 
    // MONITORAMENTO:
    // - Logs detalhados para auditoria
    // - Verifica√ß√£o de expira√ß√£o de token
    // - Valida√ß√£o de estrutura JWT
    // 
    // ===========================================

    // Fun√ß√£o para interceptar erros de autentica√ß√£o
    function setupAuthErrorHandling() {
        // Interceptar fetch requests para detectar erros 401
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            return originalFetch.apply(this, args).then(response => {
                if (response.status === 401) {
                    const url = args[0];
                    const options = args[1] || {};
                    const authHeader = options.headers?.Authorization || options.headers?.['authorization'];
                    
                    console.log('üîí Erro 401 detectado:', url, 'Token presente:', !!authHeader);
                    
                    // Se n√£o h√° token na requisi√ß√£o, n√£o for√ßar logout
                    if (!authHeader || !authHeader.startsWith('Bearer ')) {
                        console.log('üîí Requisi√ß√£o sem token, n√£o for√ßando logout');
                        return response;
                    }
                    
                    const token = authHeader.substring(7);
                    
                    // Verificar se o token √© v√°lido antes de for√ßar logout
                    try {
                        const parts = token.split('.');
                        if (parts.length === 3) {
                            const payload = JSON.parse(atob(parts[1]));
                            const now = Math.floor(Date.now() / 1000);
                            
                            // Se o token n√£o expirou, n√£o for√ßar logout
                            if (payload.exp && payload.exp > now) {
                                console.log('üîí Token v√°lido mas recebeu 401, pode ser erro tempor√°rio - n√£o for√ßando logout');
                                return response;
                            }
                        }
                    } catch (error) {
                        console.log('üîí Token inv√°lido, for√ßando logout');
                    }
                    
                    // S√≥ for√ßar logout se realmente necess√°rio
                    console.log('üîí For√ßando logout devido a erro 401');
                    forceLogout();
                }
                return response;
            });
        };
    }
    
    // Fun√ß√£o para verificar se estamos em modo de desenvolvimento
    function isDevelopmentMode() {
        return window.location.hostname === 'localhost' || 
               window.location.hostname === '127.0.0.1' ||
               window.location.hostname === '';
    }
    
    // Fun√ß√£o principal de inicializa√ß√£o de seguran√ßa
    function initSecurity() {
        // console.log('üîí Inicializando sistema de seguran√ßa...'); // Otimizado - log removido
        
        // Verificar tokens inv√°lidos
        checkForInvalidTokens();
        
        // Configurar intercepta√ß√£o de erros de autentica√ß√£o
        setupAuthErrorHandling();
        
        // Em modo de desenvolvimento, limpar dados a cada 5 minutos
        if (isDevelopmentMode()) {
            setInterval(() => {
                checkForInvalidTokens();
            }, 5 * 60 * 1000); // 5 minutos
        }
    }
    
    // Executar quando o DOM estiver pronto
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initSecurity);
    } else {
        initSecurity();
    }
    
    // Expor fun√ß√µes globalmente para debug
    window.SecurityUtils = {
        clearAuthData,
        checkForInvalidTokens,
        forceLogout
    };
    
})();
