const moment = require('moment-timezone');

/**
 * Servi√ßo para controle de ativa√ß√£o do bot WhatsApp
 * Decide quando o bot deve responder baseado em regras configur√°veis
 */
class BotActivationService {

  constructor() {
    this.timezone = 'America/Sao_Paulo';
    this.businessHours = null; // desativado

    // Palavras-chave que ativam o bot
    this.activationKeywords = [
      'oi', 'ola', 'ol√°', 'bom dia', 'boa tarde', 'boa noite',
      'agendar', 'agendamento', 'marcar', 'servico', 'servi√ßo',
      'horario', 'hor√°rio', 'atendimento', 'consulta',
      'corte', 'penteado', 'manicure', 'pedicure',
      'menu', 'ajuda', 'help', 'iniciar', 'start',
      'confirmar', 'sim', 'n√£o', 'nao', 'voltar',
      'meus agendamentos', 'meus horarios', 'minha agenda',
      'cancelar', 'reagendar', 'alterar'
    ];

    // Padr√µes regex para ativa√ß√£o
    this.activationPatterns = [
      /^oi\s/i,
      /^ol√°\s/i,
      /^bom\s+(dia|tarde|noite)/i,
      /^boa\s+(tarde|noite)/i,
      /^quero\s+(agendar|marcar)/i,
      /^gostaria\s+de\s+(agendar|marcar)/i,
      /^posso\s+(agendar|marcar)/i,
      /^como\s+(fa√ßo|posso)\s+(para\s+)?(agendar|marcar)/i,
      /^\d+\s*$/, // Apenas n√∫meros (respostas de menu)
      /^voltar$/i,
      /^menu$/i,
      /^ajuda$/i,
      /^help$/i
    ];

    // Configura√ß√µes de ativa√ß√£o
    this.settings = {
      autoActivateAfterHours: false,
      respondToUnknownMessages: false,
      activationTimeoutMinutes: 5, // manter conversa ativa por 5 minutos ap√≥s atividade
      maxInactiveMessages: 5
    };

    // Estado de conversas ativas
    this.activeConversations = new Map(); // phoneNumber -> conversationState
    this.inactiveCounters = new Map(); // phoneNumber -> inactiveMessageCount
  }

  /**
   * Verifica se o bot deve responder a uma mensagem
   * @param {string} phoneNumber - N√∫mero do telefone
   * @param {string} message - Conte√∫do da mensagem
   * @param {Object} messageContext - Contexto adicional da mensagem
   * @returns {Object} - { shouldRespond: boolean, reason: string, confidence: number }
   */
  shouldRespond(phoneNumber, message, messageContext = {}) {
    const rawMessage = (message || '').toLowerCase().trim();
    const normalizedMessage = this.normalizeMessage(message);

    // Verificar se √© uma conversa j√° ativa
    if (this.isActiveConversation(phoneNumber)) {
      this.updateConversationActivity(phoneNumber);
      return {
        shouldRespond: true,
        reason: 'conversa_ativa',
        confidence: 1.0
      };
    }

    // Ignorar hor√°rio comercial: funcionamento somente por gatilho

    // Ativar somente quando a conversa iniciar com o gatilho principal "!bot"
    // Considerar tanto a mensagem bruta quanto a normalizada (que remove pontua√ß√£o)
    if (rawMessage.startsWith('!bot') || normalizedMessage.startsWith('bot')) {
      this.activateConversation(phoneNumber);
      return {
        shouldRespond: true,
        reason: 'gatilho_bot',
        confidence: 1.0
      };
    }

    // Verificar se deve responder a mensagens desconhecidas
    if (this.settings.respondToUnknownMessages) {
      const inactiveCount = this.inactiveCounters.get(phoneNumber) || 0;

      if (inactiveCount < this.settings.maxInactiveMessages) {
        this.inactiveCounters.set(phoneNumber, inactiveCount + 1);
        return {
          shouldRespond: true,
          reason: 'mensagem_desconhecida',
          confidence: 0.3
        };
      }
    }

    // N√£o ativar por contexto; apenas via "!bot"

    return {
      shouldRespond: false,
      reason: 'nao_ativado',
      confidence: 0.0
    };
  }

  /**
   * Ativa uma conversa
   */
  activateConversation(phoneNumber) {
    const conversationState = {
      phoneNumber,
      activatedAt: new Date(),
      lastActivity: new Date(),
      isActive: true,
      messageCount: 0,
      context: {}
    };

    this.activeConversations.set(phoneNumber, conversationState);
    this.inactiveCounters.delete(phoneNumber); // Resetar contador inativo

    console.log(`ü§ñ Conversa ativada para ${phoneNumber}`);
  }

  /**
   * Desativa uma conversa
   */
  deactivateConversation(phoneNumber) {
    const conversation = this.activeConversations.get(phoneNumber);
    if (conversation) {
      conversation.isActive = false;
      conversation.deactivatedAt = new Date();
      console.log(`ü§ñ Conversa desativada para ${phoneNumber}`);
    }
  }

  /**
   * Verifica se uma conversa est√° ativa
   */
  isActiveConversation(phoneNumber) {
    const conversation = this.activeConversations.get(phoneNumber);

    if (!conversation || !conversation.isActive) {
      return false;
    }

    // Verificar timeout
    const now = new Date();
    const timeSinceLastActivity = now - conversation.lastActivity;
    const timeoutMs = this.settings.activationTimeoutMinutes * 60 * 1000;

    if (timeSinceLastActivity > timeoutMs) {
      this.deactivateConversation(phoneNumber);
      return false;
    }

    return true;
  }

  /**
   * Atualiza atividade da conversa
   */
  updateConversationActivity(phoneNumber) {
    const conversation = this.activeConversations.get(phoneNumber);
    if (conversation) {
      conversation.lastActivity = new Date();
      conversation.messageCount++;
    }
  }

  /**
   * Verifica palavras-chave de ativa√ß√£o
   */
  checkActivationKeywords(message) {
    for (const keyword of this.activationKeywords) {
      if (message.includes(keyword)) {
        const confidence = this.calculateKeywordConfidence(keyword, message);
        return {
          found: true,
          keyword,
          confidence
        };
      }
    }

    return { found: false, confidence: 0.0 };
  }

  /**
   * Verifica padr√µes regex de ativa√ß√£o
   */
  checkActivationPatterns(message) {
    for (const pattern of this.activationPatterns) {
      if (pattern.test(message)) {
        const confidence = this.calculatePatternConfidence(pattern, message);
        return {
          found: true,
          pattern: pattern.toString(),
          confidence
        };
      }
    }

    return { found: false, confidence: 0.0 };
  }

  /**
   * Verifica ativa√ß√£o baseada em contexto
   */
  checkContextActivation(phoneNumber, messageContext) {
    // Verificar se √© resposta a uma mensagem anterior do bot
    if (messageContext.isReplyToBot) {
      return {
        shouldActivate: true,
        confidence: 0.9,
        reason: 'resposta_para_bot'
      };
    }

    // Verificar se h√° contexto de agendamento pendente
    const conversation = this.activeConversations.get(phoneNumber);
    if (conversation && conversation.context.pendingBooking) {
      return {
        shouldActivate: true,
        confidence: 0.8,
        reason: 'agendamento_pendente'
      };
    }

    return {
      shouldActivate: false,
      confidence: 0.0
    };
  }

  /**
   * Calcula confian√ßa baseada na palavra-chave
   */
  calculateKeywordConfidence(keyword, message) {
    // Palavras-chave diretas t√™m maior confian√ßa
    const highConfidenceKeywords = [
      'agendar', 'agendamento', 'marcar', 'servico', 'servi√ßo',
      'menu', 'ajuda', 'help', 'iniciar', 'start'
    ];

    if (highConfidenceKeywords.includes(keyword)) {
      return 0.9;
    }

    // Sauda√ß√µes t√™m confian√ßa m√©dia
    const mediumConfidenceKeywords = [
      'oi', 'ola', 'ol√°', 'bom dia', 'boa tarde', 'boa noite'
    ];

    if (mediumConfidenceKeywords.includes(keyword)) {
      return 0.7;
    }

    // Outras palavras t√™m confian√ßa menor
    return 0.5;
  }

  /**
   * Calcula confian√ßa baseada no padr√£o
   */
  calculatePatternConfidence(pattern, message) {
    // Padr√µes espec√≠ficos t√™m alta confian√ßa
    if (pattern.toString().includes('agendar') || pattern.toString().includes('marcar')) {
      return 0.9;
    }

    // Padr√µes de sauda√ß√£o t√™m confian√ßa m√©dia
    if (pattern.toString().includes('oi') || pattern.toString().includes('ol√°')) {
      return 0.7;
    }

    // Outros padr√µes t√™m confian√ßa menor
    return 0.6;
  }

  /**
   * Verifica se est√° dentro do hor√°rio comercial
   */
  isWithinBusinessHours() {
    // Sempre tratar como dentro do hor√°rio (restri√ß√£o por gatilho j√° aplicada)
    return true;
  }

  /**
   * Obt√©m pr√≥ximo hor√°rio comercial
   */
  getNextBusinessHour() {
    // N√£o utilizado com modo por gatilho
    return null;
  }

  /**
   * Normaliza mensagem para an√°lise
   */
  normalizeMessage(message) {
    return message
      .toLowerCase()
      .trim()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Remove acentos
      .replace(/[^\w\s]/g, ' ') // Substitui pontua√ß√£o por espa√ßo
      .replace(/\s+/g, ' '); // Normaliza espa√ßos
  }

  /**
   * Atualiza configura√ß√µes do servi√ßo
   */
  updateSettings(newSettings) {
    this.settings = { ...this.settings, ...newSettings };
  }

  /**
   * Atualiza hor√°rio comercial
   */
  updateBusinessHours(start, end) {
    this.businessHours = { start, end };
  }

  /**
   * Adiciona palavra-chave de ativa√ß√£o
   */
  addActivationKeyword(keyword) {
    if (!this.activationKeywords.includes(keyword)) {
      this.activationKeywords.push(keyword.toLowerCase());
    }
  }

  /**
   * Remove palavra-chave de ativa√ß√£o
   */
  removeActivationKeyword(keyword) {
    const index = this.activationKeywords.indexOf(keyword.toLowerCase());
    if (index > -1) {
      this.activationKeywords.splice(index, 1);
    }
  }

  /**
   * Obt√©m estat√≠sticas de ativa√ß√£o
   */
  getActivationStats() {
    const activeCount = Array.from(this.activeConversations.values())
      .filter(conv => conv.isActive).length;

    const inactiveCount = this.activeConversations.size - activeCount;

    return {
      activeConversations: activeCount,
      inactiveConversations: inactiveCount,
      totalConversations: this.activeConversations.size,
      inactiveCounters: this.inactiveCounters.size
    };
  }

  /**
   * Lista conversas ativas
   */
  getActiveConversations() {
    return Array.from(this.activeConversations.values())
      .filter(conv => conv.isActive)
      .map(conv => ({
        phoneNumber: conv.phoneNumber,
        activatedAt: conv.activatedAt,
        lastActivity: conv.lastActivity,
        messageCount: conv.messageCount
      }));
  }

  /**
   * Limpa conversas inativas antigas
   */
  cleanupInactiveConversations(maxAgeHours = 24) {
    const cutoffTime = new Date();
    cutoffTime.setHours(cutoffTime.getHours() - maxAgeHours);

    for (const [phoneNumber, conversation] of this.activeConversations) {
      if (!conversation.isActive && conversation.deactivatedAt < cutoffTime) {
        this.activeConversations.delete(phoneNumber);
      }
    }

    // Limpar contadores inativos antigos
    for (const [phoneNumber, count] of this.inactiveCounters) {
      if (!this.activeConversations.has(phoneNumber)) {
        const lastActivity = this.getLastActivity(phoneNumber);
        if (!lastActivity || lastActivity < cutoffTime) {
          this.inactiveCounters.delete(phoneNumber);
        }
      }
    }
  }

  /**
   * Obt√©m √∫ltima atividade de um n√∫mero
   */
  getLastActivity(phoneNumber) {
    const conversation = this.activeConversations.get(phoneNumber);
    return conversation ? conversation.lastActivity : null;
  }

  /**
   * For√ßa ativa√ß√£o de conversa (para uso administrativo)
   */
  forceActivateConversation(phoneNumber, context = {}) {
    const conversationState = {
      phoneNumber,
      activatedAt: new Date(),
      lastActivity: new Date(),
      isActive: true,
      messageCount: 0,
      context,
      forced: true
    };

    this.activeConversations.set(phoneNumber, conversationState);
    console.log(`üîß Conversa for√ßadamente ativada para ${phoneNumber}`);
  }
}

module.exports = new BotActivationService();


