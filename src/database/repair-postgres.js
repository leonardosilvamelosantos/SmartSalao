const pool = require('../config/database');

/**
 * Repara incompatibilidades do schema no PostgreSQL
 * - Adiciona colunas ausentes esperadas pelo código
 * - Migra dados de colunas antigas quando aplicável
 */
async function repairPostgresSchema() {
  if (!pool || pool.isPostgreSQL !== true) return;

  try {
    // Servicos: garantir colunas esperadas
    await pool.query(`
      DO $$ BEGIN
        -- id_usuario
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'servicos' AND column_name = 'id_usuario'
        ) THEN
          ALTER TABLE servicos ADD COLUMN id_usuario INTEGER;
          BEGIN
            ALTER TABLE servicos
              ADD CONSTRAINT fk_servicos_usuario
              FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE;
          EXCEPTION WHEN duplicate_object THEN
            -- ignorar se já existir
            NULL;
          END;
        END IF;

        -- nome_servico
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'servicos' AND column_name = 'nome_servico'
        ) THEN
          ALTER TABLE servicos ADD COLUMN nome_servico TEXT;
          IF EXISTS (
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'servicos' AND column_name = 'nome'
          ) THEN
            UPDATE servicos SET nome_servico = nome WHERE nome_servico IS NULL;
          END IF;
        END IF;

        -- duracao_min
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'servicos' AND column_name = 'duracao_min'
        ) THEN
          ALTER TABLE servicos ADD COLUMN duracao_min INTEGER;
          IF EXISTS (
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'servicos' AND column_name = 'duracao'
          ) THEN
            UPDATE servicos SET duracao_min = duracao WHERE duracao_min IS NULL;
          END IF;
        END IF;

        -- valor (migrar de preco, se existir)
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'servicos' AND column_name = 'valor'
        ) THEN
          ALTER TABLE servicos ADD COLUMN valor NUMERIC(10,2);
          IF EXISTS (
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'servicos' AND column_name = 'preco'
          ) THEN
            UPDATE servicos SET valor = preco WHERE valor IS NULL;
          END IF;
        END IF;
      END $$;
    `);

    // Índices úteis em servicos
    await pool.query(`
      DO $$ BEGIN
        BEGIN CREATE INDEX IF NOT EXISTS idx_servicos_usuario ON servicos(id_usuario); EXCEPTION WHEN OTHERS THEN NULL; END;
      END $$;
    `);

    // Compatibilidade: adicionar coluna gerada preco em servicos (espelha valor)
    await pool.query(`
      DO $$ BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'servicos' AND column_name = 'preco'
        ) THEN
          BEGIN
            ALTER TABLE servicos ADD COLUMN preco NUMERIC(10,2) GENERATED ALWAYS AS (valor) STORED;
          EXCEPTION WHEN OTHERS THEN
            -- Fallback para versões sem coluna gerada
            BEGIN
              ALTER TABLE servicos ADD COLUMN preco NUMERIC(10,2);
            EXCEPTION WHEN duplicate_column THEN NULL; END;
            UPDATE servicos SET preco = valor WHERE preco IS NULL;
          END;
        END IF;
      END $$;
    `);

    // Configuracoes: garantir colunas esperadas
    await pool.query(`
      DO $$ BEGIN
        -- id_configuracao (identity)
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'configuracoes' AND column_name = 'id_configuracao'
        ) THEN
          BEGIN
            ALTER TABLE configuracoes ADD COLUMN id_configuracao INTEGER GENERATED BY DEFAULT AS IDENTITY;
          EXCEPTION WHEN duplicate_column THEN NULL; END;
        END IF;

        -- id_usuario
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'configuracoes' AND column_name = 'id_usuario'
        ) THEN
          ALTER TABLE configuracoes ADD COLUMN id_usuario INTEGER;
          BEGIN
            ALTER TABLE configuracoes
              ADD CONSTRAINT fk_configuracoes_usuario
              FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE;
          EXCEPTION WHEN duplicate_object THEN NULL; END;
        END IF;
      END $$;
    `);

    // Índices úteis em configuracoes
    await pool.query(`
      DO $$ BEGIN
        BEGIN CREATE INDEX IF NOT EXISTS idx_configuracoes_usuario ON configuracoes(id_usuario); EXCEPTION WHEN OTHERS THEN NULL; END;
      END $$;
    `);

    // Tenants: alinhar colunas esperadas pelo app
    await pool.query(`
      DO $$ BEGIN
        -- nome (espelhar nome_tenant)
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'tenants' AND column_name = 'nome'
        ) THEN
          BEGIN
            ALTER TABLE tenants ADD COLUMN nome TEXT;
          EXCEPTION WHEN duplicate_column THEN NULL; END;
          UPDATE tenants SET nome = nome_tenant WHERE nome IS NULL AND nome_tenant IS NOT NULL;
        END IF;

        -- email
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'tenants' AND column_name = 'email'
        ) THEN
          BEGIN
            ALTER TABLE tenants ADD COLUMN email TEXT;
          EXCEPTION WHEN duplicate_column THEN NULL; END;
        END IF;

        -- telefone
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'tenants' AND column_name = 'telefone'
        ) THEN
          BEGIN
            ALTER TABLE tenants ADD COLUMN telefone TEXT;
          EXCEPTION WHEN duplicate_column THEN NULL; END;
        END IF;

        -- plano
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'tenants' AND column_name = 'plano'
        ) THEN
          BEGIN
            ALTER TABLE tenants ADD COLUMN plano TEXT DEFAULT 'basico';
          EXCEPTION WHEN duplicate_column THEN NULL; END;
        END IF;

        -- limites
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'tenants' AND column_name = 'limites'
        ) THEN
          BEGIN
            ALTER TABLE tenants ADD COLUMN limites JSONB;
          EXCEPTION WHEN duplicate_column THEN NULL; END;
        END IF;

        -- configuracoes
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'tenants' AND column_name = 'configuracoes'
        ) THEN
          BEGIN
            ALTER TABLE tenants ADD COLUMN configuracoes JSONB;
          EXCEPTION WHEN duplicate_column THEN NULL; END;
        END IF;

        -- schema_name
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'tenants' AND column_name = 'schema_name'
        ) THEN
          BEGIN
            ALTER TABLE tenants ADD COLUMN schema_name TEXT;
          EXCEPTION WHEN duplicate_column THEN NULL; END;
        END IF;

        -- data_criacao / data_atualizacao
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'tenants' AND column_name = 'data_criacao'
        ) THEN
          BEGIN
            ALTER TABLE tenants ADD COLUMN data_criacao TIMESTAMP;
          EXCEPTION WHEN duplicate_column THEN NULL; END;
          UPDATE tenants SET data_criacao = created_at WHERE data_criacao IS NULL;
        END IF;
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'tenants' AND column_name = 'data_atualizacao'
        ) THEN
          BEGIN
            ALTER TABLE tenants ADD COLUMN data_atualizacao TIMESTAMP;
          EXCEPTION WHEN duplicate_column THEN NULL; END;
          UPDATE tenants SET data_atualizacao = updated_at WHERE data_atualizacao IS NULL;
        END IF;
      END $$;
    `);

    // Compatibilidade: adicionar coluna gerada data_agendamento em agendamentos (espelha start_at)
    await pool.query(`
      DO $$ BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'agendamentos' AND column_name = 'data_agendamento'
        ) THEN
          BEGIN
            ALTER TABLE agendamentos ADD COLUMN data_agendamento TIMESTAMP GENERATED ALWAYS AS (start_at) STORED;
          EXCEPTION WHEN OTHERS THEN
            -- Fallback para versões sem coluna gerada
            BEGIN
              ALTER TABLE agendamentos ADD COLUMN data_agendamento TIMESTAMP;
            EXCEPTION WHEN duplicate_column THEN NULL; END;
            UPDATE agendamentos SET data_agendamento = start_at WHERE data_agendamento IS NULL;
          END;
        END IF;
      END $$;
    `);

    // Compatibilidade: adicionar coluna gerada data_agendamento em slots (espelha start_at)
    await pool.query(`
      DO $$ BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.columns
          WHERE table_name = 'slots' AND column_name = 'data_agendamento'
        ) THEN
          BEGIN
            ALTER TABLE slots ADD COLUMN data_agendamento TIMESTAMP GENERATED ALWAYS AS (start_at) STORED;
          EXCEPTION WHEN OTHERS THEN
            -- Fallback para versões sem coluna gerada
            BEGIN
              ALTER TABLE slots ADD COLUMN data_agendamento TIMESTAMP;
            EXCEPTION WHEN duplicate_column THEN NULL; END;
            UPDATE slots SET data_agendamento = start_at WHERE data_agendamento IS NULL;
          END;
        END IF;
      END $$;
    `);
  } catch (err) {
    console.error('❌ Erro ao reparar schema no PostgreSQL:', err);
  }
}

module.exports = { repairPostgresSchema };


