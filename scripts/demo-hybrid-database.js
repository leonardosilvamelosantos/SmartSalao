#!/usr/bin/env node

/**
 * Demonstra√ß√£o da Configura√ß√£o H√≠brida de Banco
 * Mostra como o sistema detecta e usa SQLite/PostgreSQL automaticamente
 */

const dbConfig = require('../src/config/database');

class HybridDatabaseDemo {
  constructor() {
    this.demoData = {
      usuarios: [
        { nome: 'Jo√£o Silva', email: 'joao@teste.com', tipo: 'barbeiro' },
        { nome: 'Maria Santos', email: 'maria@teste.com', tipo: 'admin' }
      ],
      servicos: [
        { nome_servico: 'Corte Masculino', duracao_min: 30, valor: 25.00 },
        { nome_servico: 'Barba', duracao_min: 20, valor: 15.00 }
      ]
    };
  }

  async run() {
    console.log('üé≠ Demonstra√ß√£o da Configura√ß√£o H√≠brida de Banco\n');

    try {
      await this.showCurrentConfig();
      await this.demonstrateSQLiteMode();
      await this.demonstratePostgreSQLMode();
      await this.showMigrationProcess();
      
      console.log('\n‚úÖ Demonstra√ß√£o conclu√≠da!');
      console.log('\nüìö Como usar:');
      console.log('1. Desenvolvimento: NODE_ENV=development (usa SQLite)');
      console.log('2. Produ√ß√£o: NODE_ENV=production (usa PostgreSQL)');
      console.log('3. For√ßar SQLite: DB_TYPE=sqlite');
      console.log('4. For√ßar PostgreSQL: DB_TYPE=postgresql');

    } catch (error) {
      console.error('‚ùå Erro na demonstra√ß√£o:', error.message);
    }
  }

  async showCurrentConfig() {
    console.log('üîç Configura√ß√£o Atual:');
    console.log('=====================');
    
    const connection = await dbConfig.testConnection();
    
    console.log(`üìä Banco detectado: ${connection.type}`);
    console.log(`‚úÖ Status: ${connection.success ? 'Conectado' : 'Erro'}`);
    console.log(`‚è∞ Timestamp: ${connection.timestamp}`);
    console.log(`üìã Vers√£o: ${connection.version}`);
    console.log(`üîß Configura√ß√£o: ${dbConfig.isPostgreSQL ? 'PostgreSQL' : 'SQLite'}`);
  }

  async demonstrateSQLiteMode() {
    console.log('\nüóÉÔ∏è Modo SQLite (Desenvolvimento):');
    console.log('==================================');
    
    // Simular modo SQLite
    const originalEnv = { ...process.env };
    
    try {
      process.env.NODE_ENV = 'development';
      process.env.DB_TYPE = 'sqlite';
      
      console.log('üìù Vari√°veis de ambiente:');
      console.log(`  NODE_ENV=${process.env.NODE_ENV}`);
      console.log(`  DB_TYPE=${process.env.DB_TYPE}`);
      
      console.log('\nüí° Caracter√≠sticas do SQLite:');
      console.log('  ‚úÖ Arquivo √∫nico (data/agendamento_dev.db)');
      console.log('  ‚úÖ Sem depend√™ncias externas');
      console.log('  ‚úÖ Ideal para desenvolvimento');
      console.log('  ‚ùå N√£o suporta schemas (multi-tenancy limitado)');
      console.log('  ‚ùå Performance limitada para muitos usu√°rios');
      
      console.log('\nüîß Como ativar:');
      console.log('  export NODE_ENV=development');
      console.log('  export DB_TYPE=sqlite');
      console.log('  npm start');
      
    } finally {
      process.env = originalEnv;
    }
  }

  async demonstratePostgreSQLMode() {
    console.log('\nüêò Modo PostgreSQL (Produ√ß√£o):');
    console.log('==============================');
    
    // Simular modo PostgreSQL
    const originalEnv = { ...process.env };
    
    try {
      process.env.NODE_ENV = 'production';
      process.env.DB_TYPE = 'postgresql';
      process.env.DB_HOST = 'localhost';
      process.env.DB_PORT = '5432';
      
      console.log('üìù Vari√°veis de ambiente:');
      console.log(`  NODE_ENV=${process.env.NODE_ENV}`);
      console.log(`  DB_TYPE=${process.env.DB_TYPE}`);
      console.log(`  DB_HOST=${process.env.DB_HOST}`);
      console.log(`  DB_PORT=${process.env.DB_PORT}`);
      
      console.log('\nüí° Caracter√≠sticas do PostgreSQL:');
      console.log('  ‚úÖ Suporte completo a schemas (multi-tenancy real)');
      console.log('  ‚úÖ Performance superior');
      console.log('  ‚úÖ Recursos avan√ßados (JSONB, √≠ndices, etc.)');
      console.log('  ‚úÖ Ideal para produ√ß√£o');
      console.log('  ‚ùå Requer configura√ß√£o externa');
      console.log('  ‚ùå Mais complexo para desenvolvimento');
      
      console.log('\nüîß Como ativar:');
      console.log('  export NODE_ENV=production');
      console.log('  export DB_TYPE=postgresql');
      console.log('  docker-compose up -d db');
      console.log('  npm start');
      
    } finally {
      process.env = originalEnv;
    }
  }

  async showMigrationProcess() {
    console.log('\nüîÑ Processo de Migra√ß√£o:');
    console.log('========================');
    
    console.log('üìã Passos para migrar de SQLite para PostgreSQL:');
    console.log('  1. Configurar PostgreSQL:');
    console.log('     npm run db:start-postgres');
    console.log('  2. Migrar dados:');
    console.log('     npm run db:migrate-sqlite-to-postgres');
    console.log('  3. Testar configura√ß√£o:');
    console.log('     npm run db:test-config');
    console.log('  4. Ativar PostgreSQL:');
    console.log('     export NODE_ENV=production');
    console.log('     npm start');
    
    console.log('\nüìä Vantagens da configura√ß√£o h√≠brida:');
    console.log('  ‚úÖ Desenvolvimento r√°pido com SQLite');
    console.log('  ‚úÖ Produ√ß√£o robusta com PostgreSQL');
    console.log('  ‚úÖ Detec√ß√£o autom√°tica de banco');
    console.log('  ‚úÖ Migra√ß√£o de dados simplificada');
    console.log('  ‚úÖ Compatibilidade total entre bancos');
  }

  async demonstrateQueries() {
    console.log('\nüîç Demonstra√ß√£o de Queries:');
    console.log('============================');
    
    try {
      // Testar query b√°sica
      const result = await dbConfig.pool.query('SELECT 1 as test');
      console.log('‚úÖ Query b√°sica funcionando');
      
      // Testar inser√ß√£o (se tabelas existirem)
      try {
        await dbConfig.pool.query(`
          INSERT INTO usuarios (nome, email, senha_hash, tipo) 
          VALUES ($1, $2, $3, $4)
        `, ['Teste Demo', 'demo@teste.com', 'hash123', 'demo']);
        
        console.log('‚úÖ Inser√ß√£o funcionando');
        
        // Limpar dados de teste
        await dbConfig.pool.query('DELETE FROM usuarios WHERE email = $1', ['demo@teste.com']);
        console.log('‚úÖ Limpeza funcionando');
        
      } catch (error) {
        console.log('‚ö†Ô∏è Inser√ß√£o n√£o testada (tabelas podem n√£o existir)');
      }
      
    } catch (error) {
      console.log('‚ùå Erro nas queries:', error.message);
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  const demo = new HybridDatabaseDemo();
  demo.run();
}

module.exports = HybridDatabaseDemo;
