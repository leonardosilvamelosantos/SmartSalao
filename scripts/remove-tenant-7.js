#!/usr/bin/env node

/**
 * Script para remover o tenant 7 que est√° causando problemas
 * Remove usu√°rio, sess√µes WhatsApp e arquivos de autentica√ß√£o
 */

const path = require('path');
require('dotenv').config();

async function removeTenant7() {
  try {
    console.log('üóëÔ∏è Removendo tenant 7 que est√° causando problemas...\n');

    const pool = require('../src/config/database');

    console.log('üìä === VERIFICA√á√ÉO PR√âVIA ===');
    
    // Verificar usu√°rio do tenant 7
    const userQuery = `
      SELECT id_usuario, nome, email, whatsapp, tipo, ativo
      FROM usuarios 
      WHERE id_tenant = 7
    `;
    
    const user = await pool.query(userQuery);
    console.log(`\nüë§ Usu√°rio encontrado no tenant 7: ${user.rows.length}`);
    
    if (user.rows.length > 0) {
      const usuario = user.rows[0];
      console.log(`   Nome: ${usuario.nome}`);
      console.log(`   Email: ${usuario.email}`);
      console.log(`   WhatsApp: ${usuario.whatsapp}`);
      console.log(`   Tipo: ${usuario.tipo}`);
      console.log(`   Ativo: ${usuario.ativo ? 'Sim' : 'N√£o'}`);
    }

    console.log('\nüìä === REMOVENDO DADOS DO TENANT 7 ===');
    
    // Remover agendamentos do tenant 7
    try {
      const agendamentosQuery = `
        DELETE FROM agendamentos 
        WHERE id_usuario IN (
          SELECT id_usuario FROM usuarios WHERE id_tenant = 7
        )
      `;
      const agendamentosResult = await pool.query(agendamentosQuery);
      console.log(`‚úÖ Agendamentos removidos: ${agendamentosResult.rowCount}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro ao remover agendamentos: ${error.message}`);
    }

    // Remover servi√ßos do tenant 7
    try {
      const servicosQuery = `
        DELETE FROM servicos 
        WHERE id_usuario IN (
          SELECT id_usuario FROM usuarios WHERE id_tenant = 7
        )
      `;
      const servicosResult = await pool.query(servicosQuery);
      console.log(`‚úÖ Servi√ßos removidos: ${servicosResult.rowCount}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro ao remover servi√ßos: ${error.message}`);
    }

    // Remover clientes do tenant 7
    try {
      const clientesQuery = `
        DELETE FROM clientes 
        WHERE id_usuario IN (
          SELECT id_usuario FROM usuarios WHERE id_tenant = 7
        )
      `;
      const clientesResult = await pool.query(clientesQuery);
      console.log(`‚úÖ Clientes removidos: ${clientesResult.rowCount}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro ao remover clientes: ${error.message}`);
    }

    // Remover usu√°rio do tenant 7
    try {
      const usuarioQuery = `
        DELETE FROM usuarios WHERE id_tenant = 7
      `;
      const usuarioResult = await pool.query(usuarioQuery);
      console.log(`‚úÖ Usu√°rio removido: ${usuarioResult.rowCount}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro ao remover usu√°rio: ${error.message}`);
    }

    console.log('\nüìä === REMOVENDO SESS√ïES WHATSAPP ===');
    
    // Remover sess√µes WhatsApp do tenant 7
    try {
      const SessionManager = require('../src/whatsapp-bot/core/SessionManager');
      const sessionManager = new SessionManager();
      
      // Verificar se h√° sess√£o para o tenant 7
      const sessions = await sessionManager.getAllInstances();
      const tenant7Session = sessions.find(s => s.tenantId === '7');
      
      if (tenant7Session) {
        console.log('üîç Sess√£o WhatsApp encontrada para tenant 7');
        console.log(`   Status: ${tenant7Session.status}`);
        console.log(`   √öltima Atividade: ${tenant7Session.lastActivity}`);
        
        // Remover sess√£o
        await sessionManager.removeInstance('7');
        console.log('‚úÖ Sess√£o WhatsApp removida');
      } else {
        console.log('‚ÑπÔ∏è Nenhuma sess√£o WhatsApp encontrada para tenant 7');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro ao remover sess√£o WhatsApp: ${error.message}`);
    }

    console.log('\nüìä === REMOVENDO ARQUIVOS DE AUTENTICA√á√ÉO ===');
    
    // Remover arquivos de autentica√ß√£o do tenant 7
    try {
      const fs = require('fs');
      const authBasePath = path.join(__dirname, '..', 'src', 'whatsapp-bot', 'auth');
      const tenant7AuthPath = path.join(authBasePath, '7');
      
      if (fs.existsSync(tenant7AuthPath)) {
        fs.rmSync(tenant7AuthPath, { recursive: true, force: true });
        console.log('‚úÖ Arquivos de autentica√ß√£o removidos');
      } else {
        console.log('‚ÑπÔ∏è Nenhum arquivo de autentica√ß√£o encontrado para tenant 7');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro ao remover arquivos de autentica√ß√£o: ${error.message}`);
    }

    console.log('\nüìä === VERIFICA√á√ÉO P√ìS-REMOVA√á√ÉO ===');
    
    // Verificar se o tenant 7 foi completamente removido
    const finalCheck = await pool.query(userQuery);
    console.log(`\nüë§ Usu√°rios restantes no tenant 7: ${finalCheck.rows.length}`);
    
    if (finalCheck.rows.length === 0) {
      console.log('‚úÖ Tenant 7 removido com sucesso!');
    } else {
      console.log('‚ö†Ô∏è Ainda h√° usu√°rios no tenant 7');
    }

    console.log('\n‚úÖ Limpeza do tenant 7 conclu√≠da!');
    console.log('\nüí° Pr√≥ximos passos:');
    console.log('   1. Reinicie o servidor: npm start');
    console.log('   2. Verifique se os erros de credenciais expiradas pararam');
    console.log('   3. Configure novos tenants se necess√°rio');

  } catch (error) {
    console.error('‚ùå Erro ao remover tenant 7:', error);
    process.exit(1);
  } finally {
    // Fechar conex√£o com o banco
    try {
      const pool = require('../src/config/database');
      await pool.end();
    } catch (error) {
      // Ignorar erro de fechamento
    }
  }
}

// Executar script
if (require.main === module) {
  removeTenant7();
}

module.exports = removeTenant7;
