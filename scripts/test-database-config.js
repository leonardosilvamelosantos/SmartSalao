#!/usr/bin/env node

/**
 * Script de Teste da Configura√ß√£o de Banco
 * Testa a detec√ß√£o autom√°tica SQLite/PostgreSQL
 */

const dbConfig = require('../src/config/database');

class DatabaseConfigTester {
  constructor() {
    this.results = {
      sqlite: null,
      postgresql: null,
      hybrid: null
    };
  }

  async run() {
    console.log('üß™ Testando configura√ß√£o de banco de dados...\n');

    try {
      await this.testCurrentConfig();
      await this.testSQLiteMode();
      await this.testPostgreSQLMode();
      await this.testHybridMode();
      
      this.printResults();
      
    } catch (error) {
      console.error('‚ùå Erro no teste:', error.message);
      process.exit(1);
    }
  }

  async testCurrentConfig() {
    console.log('üîç Testando configura√ß√£o atual...');
    
    try {
      const connection = await dbConfig.testConnection();
      
      console.log(`‚úÖ Banco atual: ${connection.type}`);
      console.log(`üìä Status: ${connection.success ? 'Conectado' : 'Erro'}`);
      console.log(`‚è∞ Timestamp: ${connection.timestamp}`);
      console.log(`üìã Vers√£o: ${connection.version}`);
      
      this.results.current = connection;
      
    } catch (error) {
      console.error('‚ùå Erro na configura√ß√£o atual:', error.message);
    }
  }

  async testSQLiteMode() {
    console.log('\nüóÉÔ∏è Testando modo SQLite...');
    
    // Salvar configura√ß√£o atual
    const originalEnv = { ...process.env };
    
    try {
      // For√ßar SQLite
      process.env.NODE_ENV = 'development';
      process.env.DB_TYPE = 'sqlite';
      process.env.USE_POSTGRESQL = 'false';
      
      // Recarregar configura√ß√£o
      delete require.cache[require.resolve('../src/config/database')];
      const sqliteConfig = require('../src/config/database');
      
      const connection = await sqliteConfig.testConnection();
      
      console.log(`‚úÖ SQLite: ${connection.success ? 'OK' : 'Erro'}`);
      console.log(`üìä Tipo: ${connection.type}`);
      
      this.results.sqlite = connection;
      
    } catch (error) {
      console.error('‚ùå Erro no SQLite:', error.message);
    } finally {
      // Restaurar configura√ß√£o
      process.env = originalEnv;
    }
  }

  async testPostgreSQLMode() {
    console.log('\nüêò Testando modo PostgreSQL...');
    
    // Salvar configura√ß√£o atual
    const originalEnv = { ...process.env };
    
    try {
      // For√ßar PostgreSQL
      process.env.NODE_ENV = 'production';
      process.env.DB_TYPE = 'postgresql';
      process.env.DB_HOST = 'localhost';
      process.env.DB_PORT = '5432';
      process.env.DB_NAME = 'agendamento';
      process.env.DB_USER = 'agendamento_user';
      process.env.DB_PASSWORD = 'agendamento_pass_2024';
      
      // Recarregar configura√ß√£o
      delete require.cache[require.resolve('../src/config/database')];
      const pgConfig = require('../src/config/database');
      
      const connection = await pgConfig.testConnection();
      
      console.log(`‚úÖ PostgreSQL: ${connection.success ? 'OK' : 'Erro'}`);
      console.log(`üìä Tipo: ${connection.type}`);
      
      this.results.postgresql = connection;
      
    } catch (error) {
      console.error('‚ùå Erro no PostgreSQL:', error.message);
      console.log('üí° Dica: Execute "node scripts/start-postgresql.js" primeiro');
    } finally {
      // Restaurar configura√ß√£o
      process.env = originalEnv;
    }
  }

  async testHybridMode() {
    console.log('\nüîÑ Testando modo h√≠brido...');
    
    try {
      // Testar detec√ß√£o autom√°tica
      const isPostgreSQL = process.env.NODE_ENV === 'production' || 
                          process.env.DB_TYPE === 'postgresql' || 
                          process.env.USE_POSTGRESQL === 'true';
      
      const isSQLite = !isPostgreSQL;
      
      console.log(`üìä Detec√ß√£o autom√°tica:`);
      console.log(`  - NODE_ENV: ${process.env.NODE_ENV || 'undefined'}`);
      console.log(`  - DB_TYPE: ${process.env.DB_TYPE || 'undefined'}`);
      console.log(`  - USE_POSTGRESQL: ${process.env.USE_POSTGRESQL || 'undefined'}`);
      console.log(`  - Resultado: ${isPostgreSQL ? 'PostgreSQL' : 'SQLite'}`);
      
      this.results.hybrid = {
        isPostgreSQL,
        isSQLite,
        detection: 'automatic'
      };
      
    } catch (error) {
      console.error('‚ùå Erro no modo h√≠brido:', error.message);
    }
  }

  printResults() {
    console.log('\nüìä Resultados dos Testes:');
    console.log('========================');
    
    // Configura√ß√£o atual
    if (this.results.current) {
      console.log(`\nüîç Configura√ß√£o Atual:`);
      console.log(`  - Tipo: ${this.results.current.type}`);
      console.log(`  - Status: ${this.results.current.success ? '‚úÖ OK' : '‚ùå Erro'}`);
    }
    
    // SQLite
    if (this.results.sqlite) {
      console.log(`\nüóÉÔ∏è SQLite:`);
      console.log(`  - Status: ${this.results.sqlite.success ? '‚úÖ OK' : '‚ùå Erro'}`);
      console.log(`  - Vers√£o: ${this.results.sqlite.version || 'N/A'}`);
    }
    
    // PostgreSQL
    if (this.results.postgresql) {
      console.log(`\nüêò PostgreSQL:`);
      console.log(`  - Status: ${this.results.postgresql.success ? '‚úÖ OK' : '‚ùå Erro'}`);
      console.log(`  - Vers√£o: ${this.results.postgresql.version || 'N/A'}`);
    }
    
    // Modo h√≠brido
    if (this.results.hybrid) {
      console.log(`\nüîÑ Modo H√≠brido:`);
      console.log(`  - Detec√ß√£o: ${this.results.hybrid.detection}`);
      console.log(`  - PostgreSQL: ${this.results.hybrid.isPostgreSQL ? '‚úÖ' : '‚ùå'}`);
      console.log(`  - SQLite: ${this.results.hybrid.isSQLite ? '‚úÖ' : '‚ùå'}`);
    }
    
    // Recomenda√ß√µes
    console.log('\nüí° Recomenda√ß√µes:');
    
    if (this.results.sqlite?.success && this.results.postgresql?.success) {
      console.log('‚úÖ Ambos os bancos est√£o funcionando!');
      console.log('   - Use SQLite para desenvolvimento');
      console.log('   - Use PostgreSQL para produ√ß√£o');
    } else if (this.results.sqlite?.success) {
      console.log('‚úÖ SQLite funcionando - ideal para desenvolvimento');
      console.log('‚ö†Ô∏è PostgreSQL n√£o dispon√≠vel - configure para produ√ß√£o');
    } else if (this.results.postgresql?.success) {
      console.log('‚úÖ PostgreSQL funcionando - ideal para produ√ß√£o');
      console.log('‚ö†Ô∏è SQLite n√£o dispon√≠vel - configure para desenvolvimento');
    } else {
      console.log('‚ùå Nenhum banco funcionando - verifique a configura√ß√£o');
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  const tester = new DatabaseConfigTester();
  tester.run();
}

module.exports = DatabaseConfigTester;
