version: '3.8'

services:
  # Aplicação principal otimizada
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: agendamento-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=agendamento
      - DB_USER=agendamento_user
      - DB_PASSWORD=agendamento_pass_2024
      - PORT=3000
      # Configurações de produção
      - JWT_SECRET=${JWT_SECRET:-your_super_secret_jwt_key_here}
      - BACKUP_DIR=/app/backups
      - LOG_LEVEL=info
      # Otimizações de memória
      - NODE_OPTIONS=--max-old-space-size=512
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - uploads:/app/uploads:rw
      - backups:/app/backups:rw
      - logs:/app/logs:rw
    networks:
      - agendamento-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Banco de dados PostgreSQL otimizado para produção
  db:
    image: postgres:15-alpine
    container_name: agendamento-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agendamento
      - POSTGRES_USER=agendamento_user
      - POSTGRES_PASSWORD=agendamento_pass_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
      # Otimizações de produção
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./config/postgres.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - agendamento-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agendamento_user -d agendamento"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '1.0'
        reservations:
          memory: 512MB
          cpus: '0.5'


  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: agendamento-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - agendamento-network

volumes:
  postgres_data:
  uploads:
  backups:
  logs:

networks:
  agendamento-network:
    driver: bridge
