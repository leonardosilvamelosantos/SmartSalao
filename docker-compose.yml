version: '3.8'

services:
  # Aplicação principal otimizada
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: agendamento-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=agendamento
      - DB_USER=agendamento_user
      - DB_PASSWORD=agendamento_pass_2024
      - PORT=3000
      # Configurações de produção
      - JWT_SECRET=${JWT_SECRET:-your_super_secret_jwt_key_here}
      - EVOLUTION_API_URL=http://evolution-api:8080
      - BACKUP_DIR=/app/backups
      - LOG_LEVEL=info
      # Otimizações de memória
      - NODE_OPTIONS=--max-old-space-size=512
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - uploads:/app/uploads:rw
      - backups:/app/backups:rw
      - logs:/app/logs:rw
    networks:
      - agendamento-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Banco de dados PostgreSQL otimizado para produção
  db:
    image: postgres:15-alpine
    container_name: agendamento-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agendamento
      - POSTGRES_USER=agendamento_user
      - POSTGRES_PASSWORD=agendamento_pass_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
      # Otimizações de produção
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./config/postgres.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - agendamento-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agendamento_user -d agendamento"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '1.0'
        reservations:
          memory: 512MB
          cpus: '0.5'

  # Evolution API otimizado para produção
  evolution-api:
    image: evoluapi/evolution-api:latest
    container_name: evolution-api
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      # Configurações básicas
      - SERVER_URL=http://localhost:8080
      - CORS_ORIGIN=http://localhost:3000,http://app:3000
      - CORS_CREDENTIALS=true
      - CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - CORS_ALLOWED_HEADERS=Content-Type,Authorization,apikey

      # Logging otimizado
      - LOG_LEVEL=WARN
      - LOG_COLOR=false

      # Banco de dados PostgreSQL (mais eficiente)
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://evolution_user:evolution_pass@db:5432/evolution_db
      - DATABASE_SAVE_DATA_INSTANCE=true
      - DATABASE_SAVE_DATA_OLD_MESSAGE=false  # Otimização
      - DATABASE_SAVE_MESSAGE_UPDATE=true
      - DATABASE_SAVE_DATA_CONTACTS=true
      - DATABASE_SAVE_DATA_CHATS=true

      # Cache Redis (opcional - para melhor performance)
      - CACHE_REDIS_ENABLED=false
      - CACHE_LOCAL_ENABLED=true
      - CACHE_LOCAL_TTL=3600

      # Storage S3 (opcional)
      - S3_ENABLED=false

      # Webhooks otimizados
      - WEBHOOK_GLOBAL_ENABLED=true
      - WEBHOOK_GLOBAL_URL=http://app:3000/api/whatsapp/webhook
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=true
      - WEBHOOK_EVENTS_APPLICATION_STARTUP=false
      - WEBHOOK_EVENTS_QRCODE_UPDATED=true
      - WEBHOOK_EVENTS_MESSAGES_SET=false
      - WEBHOOK_EVENTS_MESSAGES_UPSERT=true
      - WEBHOOK_EVENTS_MESSAGES_UPDATE=false
      - WEBHOOK_EVENTS_SEND_MESSAGE=true
      - WEBHOOK_EVENTS_CONTACTS_SET=false
      - WEBHOOK_EVENTS_CONTACTS_UPSERT=true
      - WEBHOOK_EVENTS_CONTACTS_UPDATE=false
      - WEBHOOK_EVENTS_CHATS_SET=false
      - WEBHOOK_EVENTS_CHATS_UPSERT=true
      - WEBHOOK_EVENTS_CHATS_UPDATE=false
      - WEBHOOK_EVENTS_CONNECTION_UPDATE=true
      - WEBHOOK_EVENTS_GROUPS_UPSERT=false
      - WEBHOOK_EVENTS_GROUPS_UPDATE=false

      # Rate limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_MAX=100
      - RATE_LIMIT_WINDOW=60000
    volumes:
      - evolution_data:/app/evolution_store:rw
    networks:
      - agendamento-network
    depends_on:
      - app
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '1.0'
        reservations:
          memory: 512MB
          cpus: '0.5'

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: agendamento-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - evolution-api
    networks:
      - agendamento-network

volumes:
  postgres_data:
  uploads:
  evolution_data:

networks:
  agendamento-network:
    driver: bridge
