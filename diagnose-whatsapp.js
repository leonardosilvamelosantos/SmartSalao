/**
 * Script de diagn√≥stico e corre√ß√£o para problemas de QR Code WhatsApp
 * Resolve problemas de firewall, rede e renderiza√ß√£o do QR code
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');

class WhatsAppDiagnoser {
    constructor() {
        this.issues = [];
        this.fixes = [];
    }

    /**
     * Executa diagn√≥stico completo
     */
    async runFullDiagnosis() {
        console.log('üîç DIAGN√ìSTICO COMPLETO DO WHATSAPP BOT\n');
        console.log('=' .repeat(50));

        await this.checkServerStatus();
        await this.checkNetworkConnectivity();
        await this.checkWhatsAppConnectivity();
        await this.checkQRCodeRendering();
        await this.checkFirewallSettings();
        await this.checkSessionFiles();

        this.displayResults();
        this.suggestFixes();
    }

    /**
     * Verifica se o servidor est√° rodando
     */
    async checkServerStatus() {
        console.log('üì° Verificando servidor...');
        try {
            const response = await fetch('http://localhost:3000/health');
            if (response.ok) {
                console.log('‚úÖ Servidor est√° rodando');
            } else {
                this.issues.push('Servidor n√£o est√° respondendo corretamente');
            }
        } catch (error) {
            this.issues.push('Servidor n√£o est√° acess√≠vel');
            this.fixes.push('Execute: npm start');
        }
    }

    /**
     * Verifica conectividade de rede
     */
    async checkNetworkConnectivity() {
        console.log('üåê Verificando conectividade de rede...');

        try {
            // Testa conex√£o com servidores do WhatsApp
            const whatsappHosts = [
                'web.whatsapp.com',
                'w1.web.whatsapp.com',
                'w2.web.whatsapp.com',
                'w3.web.whatsapp.com'
            ];

            for (const host of whatsappHosts) {
                try {
                    const response = await fetch(`https://${host}`, {
                        method: 'HEAD',
                        timeout: 5000
                    });
                    if (response.ok) {
                        console.log(`‚úÖ Conex√£o com ${host}: OK`);
                        break;
                    }
                } catch (error) {
                    // Continua tentando outros hosts
                }
            }
        } catch (error) {
            this.issues.push('Problemas de conectividade com WhatsApp');
            this.fixes.push('Verifique sua conex√£o com a internet');
        }
    }

    /**
     * Verifica conectividade do WhatsApp no sistema
     */
    async checkWhatsAppConnectivity() {
        console.log('üì± Verificando conectividade WhatsApp...');

        try {
            const response = await fetch('http://localhost:3000/api/bot/tenants');
            const data = await response.json();

            if (data.success && data.data.tenants.length > 0) {
                console.log('‚úÖ API do WhatsApp est√° funcionando');

                // Verifica status de um tenant
                const tenantResponse = await fetch('http://localhost:3000/api/bot/tenants/1/status');
                const tenantData = await tenantResponse.json();

                if (tenantData.success) {
                    console.log('‚úÖ Tenant est√° configurado');
                }
            }
        } catch (error) {
            this.issues.push('API do WhatsApp n√£o est√° funcionando');
        }
    }

    /**
     * Verifica renderiza√ß√£o do QR Code
     */
    checkQRCodeRendering() {
        console.log('üìä Verificando renderiza√ß√£o do QR Code...');

        // Verifica se estamos no Windows
        if (os.platform() === 'win32') {
            console.log('ü™ü Windows detectado - poss√≠veis problemas de renderiza√ß√£o');

            // Verifica se temos uma sess√£o existente
            const sessionPath = path.join(__dirname, 'src', 'data', 'whatsapp-auth', '1');
            if (fs.existsSync(sessionPath)) {
                console.log('üìÅ Sess√£o WhatsApp encontrada');
            } else {
                console.log('üìÅ Nenhuma sess√£o WhatsApp encontrada');
                this.fixes.push('Limpe dados antigos: rm -rf src/data/whatsapp-auth');
            }
        }
    }

    /**
     * Verifica configura√ß√µes de firewall
     */
    checkFirewallSettings() {
        console.log('üî• Verificando configura√ß√µes de firewall...');

        if (os.platform() === 'win32') {
            try {
                // Verifica status do firewall do Windows
                execSync('netsh advfirewall show allprofiles state', { stdio: 'pipe' });
                console.log('‚úÖ Firewall do Windows acess√≠vel');
            } catch (error) {
                this.issues.push('Problemas com firewall do Windows');
                this.fixes.push('Execute como administrador ou configure exce√ß√µes');
            }
        }
    }

    /**
     * Verifica arquivos de sess√£o
     */
    checkSessionFiles() {
        console.log('üíæ Verificando arquivos de sess√£o...');

        const sessionDir = path.join(__dirname, 'src', 'data', 'whatsapp-auth');

        if (fs.existsSync(sessionDir)) {
            const sessions = fs.readdirSync(sessionDir);
            console.log(`üìÅ Encontradas ${sessions.length} sess√µes`);

            sessions.forEach(session => {
                const sessionPath = path.join(sessionDir, session);
                const stats = fs.statSync(sessionPath);
                console.log(`  - ${session}: ${stats.size} bytes`);
            });
        } else {
            console.log('üìÅ Nenhum diret√≥rio de sess√£o encontrado');
        }
    }

    /**
     * Exibe resultados do diagn√≥stico
     */
    displayResults() {
        console.log('\nüìã RESULTADOS DO DIAGN√ìSTICO');
        console.log('=' .repeat(30));

        if (this.issues.length === 0) {
            console.log('‚úÖ Nenhum problema detectado!');
        } else {
            console.log('‚ö†Ô∏è Problemas encontrados:');
            this.issues.forEach((issue, index) => {
                console.log(`  ${index + 1}. ${issue}`);
            });
        }
    }

    /**
     * Sugere corre√ß√µes
     */
    suggestFixes() {
        if (this.fixes.length > 0) {
            console.log('\nüîß CORRE√á√ïES SUGERIDAS:');
            console.log('=' .repeat(25));
            this.fixes.forEach((fix, index) => {
                console.log(`  ${index + 1}. ${fix}`);
            });
        }

        console.log('\nüöÄ SOLU√á√ïES GERAIS:');
        console.log('=' .repeat(20));
        console.log('1. ‚úÖ Execute o servidor: npm start');
        console.log('2. üåê Verifique sua conex√£o com a internet');
        console.log('3. üì± Certifique-se de que n√£o est√° usando WhatsApp Web em outro lugar');
        console.log('4. ü™ü No Windows, tente usar um terminal diferente (cmd, PowerShell, Git Bash)');
        console.log('5. üî• Desative temporariamente o firewall/antiv√≠rus');
        console.log('6. üîÑ Limpe sess√µes antigas: rm -rf src/data/whatsapp-auth');
        console.log('7. üìä Use o script de teste: npm run test-send-simple');

        console.log('\nüìñ PARA MAIS DETALHES, consulte: TEST_WHATSAPP_README.md');
    }

    /**
     * Limpa sess√µes antigas
     */
    cleanOldSessions() {
        console.log('üßπ Limpando sess√µes antigas...');

        const sessionDir = path.join(__dirname, 'src', 'data', 'whatsapp-auth');

        if (fs.existsSync(sessionDir)) {
            try {
                fs.rmSync(sessionDir, { recursive: true, force: true });
                console.log('‚úÖ Sess√µes antigas removidas');
            } catch (error) {
                console.error('‚ùå Erro ao remover sess√µes:', error.message);
            }
        }
    }

    /**
     * Testa gera√ß√£o de QR Code
     */
    async testQRGeneration() {
        console.log('üß™ Testando gera√ß√£o de QR Code...');

        try {
            // Faz uma requisi√ß√£o de inicializa√ß√£o
            const initResponse = await fetch('http://localhost:3000/api/bot/tenants/1/initialize', {
                method: 'POST'
            });

            if (initResponse.ok) {
                console.log('‚úÖ Inicializa√ß√£o do WhatsApp: OK');

                // Aguarda um pouco e tenta obter QR
                setTimeout(async () => {
                    try {
                        const qrResponse = await fetch('http://localhost:3000/api/bot/tenants/1/qr');
                        if (qrResponse.ok) {
                            const qrData = await qrResponse.json();
                            if (qrData.message && qrData.message.qr) {
                                console.log('‚úÖ QR Code gerado com sucesso!');
                                console.log('üì± QR Code dispon√≠vel para escaneamento');
                            } else {
                                console.log('‚è≥ QR Code ainda sendo gerado...');
                            }
                        }
                    } catch (error) {
                        console.log('‚ùå Erro ao obter QR Code');
                    }
                }, 3000);

            } else {
                console.log('‚ùå Falha na inicializa√ß√£o do WhatsApp');
            }
        } catch (error) {
            console.log('‚ùå Erro na conex√£o com o servidor');
        }
    }
}

// Fun√ß√£o principal
async function main() {
    const diagnoser = new WhatsAppDiagnoser();

    const args = process.argv.slice(2);

    if (args.includes('--clean')) {
        diagnoser.cleanOldSessions();
    } else if (args.includes('--test-qr')) {
        await diagnoser.testQRGeneration();
    } else if (args.includes('--help')) {
        console.log('üìñ Uso: node diagnose-whatsapp.js [op√ß√µes]');
        console.log('');
        console.log('Op√ß√µes:');
        console.log('  --clean     Limpa sess√µes antigas');
        console.log('  --test-qr   Testa gera√ß√£o de QR Code');
        console.log('  --help      Mostra esta ajuda');
        console.log('');
        console.log('Sem op√ß√µes: executa diagn√≥stico completo');
    } else {
        await diagnoser.runFullDiagnosis();
    }
}

// Executa se chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { WhatsAppDiagnoser };




